plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.firebase.crashlytics'
    id 'com.google.gms.google-services'
    id 'dagger.hilt.android.plugin'
}

android {
    signingConfigs {
        config {
            final def keystorePath = System.getenv("SPACE_APP_KEYSTORE_PATH")
            if (keystorePath != null && !keystorePath.isEmpty()) {
                final def keystoreFile = file(keystorePath)
                if (keystoreFile.exists()) {
                    storeFile keystoreFile
                    storePassword System.getenv("SPACE_APP_KEYSTORE_PASSWORD")
                    keyAlias "StarlinerKey"
                    keyPassword System.getenv("SPACE_APP_KEY_PASSWORD")
                } else {
                    println "couldn't find keystore file: " + keystoreFile.path
                }
            } else {
                println "keystore keystorePath does not exist"
            }
        }
    }

    compileSdkVersion buildConfig.compileSdk
    defaultConfig {
        applicationId "sk.kasper.space"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode 18
        versionName "1.2.5"
        testInstrumentationRunner "sk.kasper.space.MockAndroidJUnitRunner"

        manifestPlaceholders += [
                google_maps_key: "${System.getenv("SPACE_APP_GOOGLE_MAPS_KEY")}",
        ]
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            manifestPlaceholders += [usesCleartextTraffic: "false"]
        }
        debug {
            manifestPlaceholders += [usesCleartextTraffic: "true"]
        }
    }
    compileOptions {
        sourceCompatibility buildConfig.javaVersion
        targetCompatibility buildConfig.javaVersion

        kotlinOptions {
            freeCompilerArgs += [
                '-Xopt-in=kotlin.RequiresOptIn',
            ]
        }
    }
    kotlinOptions {
        jvmTarget = buildConfig.jvmTarget
        useIR = true
    }
    testOptions {
        unitTests.returnDefaultValues = true

        // Always show the result of every unit test, even if it passes.
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }

        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/AL2.0', 'META-INF/LGPL2.1']
        }
    }
}

kapt {
    correctErrorTypes true
}

dependencies {
    implementation project(':domain')
    implementation project(':ui-common')
    implementation project(':ui-settings')
    implementation project(':ui-timeline')
    implementation project(':ui-playground')
    implementation project(':ui-launch')
    implementation project(':database-android')
    implementation project(':base-android')
    implementation project(':repository')
    implementation project(':remote')

    implementation libs.android.material

    implementation libs.androidx.appcompat
    implementation libs.androidx.core

    implementation libs.androidx.drawerlayout

    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.process

    implementation libs.androidx.navigation.fragment
    implementation libs.androidx.navigation.ui

    implementation libs.androidx.work.runtime

    implementation libs.androidx.preference

    implementation libs.kotlin.stdlib.jdk7
    implementation 'androidx.room:room-common:2.4.2'
    implementation 'androidx.room:room-ktx:2.4.2'

    androidTestImplementation libs.dagger.hilt.android
    kaptAndroidTest libs.dagger.hilt.android
    implementation libs.dagger.hilt.android
    kapt libs.dagger.hilt.compiler

    implementation libs.timber

    implementation libs.threetenabp.threetenabp
    testImplementation libs.threetenabp.test

    implementation libs.google.firebase.analytics
    implementation libs.google.firebase.crashlytics
    implementation platform(libs.google.firebase.bom)

    implementation libs.kotlin.coroutines.core
    implementation libs.kotlin.coroutines.android
    implementation libs.kotlin.coroutines.test

    androidTestImplementation libs.androidx.test.espresso.contrib
    androidTestImplementation libs.androidx.test.espresso.core
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.runner
    androidTestUtil libs.androidx.test.orchestrator
    testImplementation libs.androidx.coretesting
    testImplementation libs.junit
    testImplementation libs.mockito.kotlin
}
